name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
      - develop

env:

  AWS_REGION: eu-west-2
  ENV: ${{ github.ref == 'refs/heads/staging' && 'stage' || github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  AWS_ACCESS_KEY_ID: ${{ github.ref == 'refs/heads/staging' && secrets.AWS_ACCESS_KEY_ID_STAGE || github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID_PROD || secrets.AWS_ACCESS_KEY_ID_DEV }}
  AWS_SECRET_ACCESS_KEY: ${{ github.ref == 'refs/heads/staging' && secrets.AWS_SECRET_ACCESS_KEY_STAGE || github.ref == 'refs/heads/main' && secrets.AWS_SECRET_ACCESS_KEY_PROD || secrets.AWS_SECRET_ACCESS_KEY_DEV }}

  TF_VERSION: 1.9.7
  TG_VERSION: 0.67.15

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  infra:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    steps:
      - name: Checkout üõé
        uses: actions/checkout@main

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v0.1.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }} 

      - name: "AWS Creds"
        run: |
          mkdir -p ~/.aws/
          cat << EOF > ~/.aws/credentials
          [dev]
            aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
            aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

            [stage]
            aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_STAGE }}
            aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGE }}

            [prod]
            aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
            aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

            [apex]
            aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_APEX }}
            aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_APEX }}
          EOF

          cat << EOF > ~/.aws/config
          [profile dev]
          region = ${{ env.AWS_REGION }}

          [profile stage]
          region = ${{ env.AWS_REGION }}

          [profile prod]
          region = ${{ env.AWS_REGION }}

          [profile apex]
          region = ${{ env.AWS_REGION }}
          EOF

      - name: "Terraform Apply"
        run: yarn deploy:infra

  frontend:
    needs: [infra]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    steps:
      - name: Checkout üõé
        uses: actions/checkout@main

      # - name: üõé Checkout Types
      #   uses: actions/checkout@v4
      #   with:
      #     submodules: true
      #     token: ${{ secrets.TYPES_SUBMODULE_ACCESS }}
      - name: Setup node env üèó
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path üõ†
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)">>$GITHUB_OUTPUT

      - name: Cache node_modules üì¶
        uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies üë®üèª‚Äçüíª
        run: yarn

      - name: Generate
        run: yarn run generate

      #  - name: Run linter üëÄ
      #   run: yarn lint

      #      - name: Run tests üß™
      #        run: yarn test


      - name: "AWS Creds"
        run: |
          mkdir -p ~/.aws/
          cat << EOF > ~/.aws/credentials
          [dev]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

          [stage]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_STAGE }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGE }}

          [prod]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

          [apex]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_APEX }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_APEX }}
          EOF

          cat << EOF > ~/.aws/config
          [profile dev]
          region = ${{ env.AWS_REGION }}

          [profile stage]
          region = ${{ env.AWS_REGION }}

          [profile prod]
          region = ${{ env.AWS_REGION }}

          [profile apex]
          region = ${{ env.AWS_REGION }}
          EOF

      - name: Deploy static site to S3 bucket
        run: aws s3 sync $DIST_DIR $S3_BUCKET s3://${{ env.ENV }}-website-iea-paris --delete  --exclude ".*" --size-only
        env:
          DIST_DIR: .output/public/

      - name: Get CloudFront Distribution ID
        id: get-distribution-id
        run: |
          export BUCKET_NAME="${{ env.ENV }}-website-iea-paris"
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[?contains(DomainName, '${BUCKET_NAME}.s3')]].Id" \
            --output text)
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.get-distribution-id.outputs.distribution_id }} --paths "/*"